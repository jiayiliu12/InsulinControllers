import os
import pandas as pd
from py_replay_bg.py_replay_bg import ReplayBG
from datetime import datetime, timedelta
import numpy as np

def simulate(basal_handler,
       basal_handler_params, data_given,
           meal_input_modulation_factor=1):


    # We give the data as a variable to the simulation
    data = data_given
    
    data.t = pd.to_datetime(data['t'], format='mixed')

    #Modulate CHO if needed
    data.cho = data.cho * meal_input_modulation_factor

    # Set other parameters for identification
    modality = 'replay'
    bw = 62
    scenario = 'multi-meal'
    # scenario = 'single-meal'
    save_name = 'patient'
    save_suffix = ''
    save_folder = os.path.abspath('')
    # Instantiate ReplayBG
    rbg = ReplayBG(modality=modality, data=data, bw=bw, scenario=scenario, save_name=save_name, save_folder=save_folder, save_suffix=save_suffix,
                   cgm_model='IG', analyze_results=False, verbose=False, plot_mode=False,
                   basal_source='dss',basal_handler=basal_handler, basal_handler_params=basal_handler_params,
                   bolus_source='dss', bolus_calculator_handler=standard_bolus_calculator)

    # Run it
    results = rbg.run(data=data, bw=bw, n_replay=1)

    # Unwrap the results
    glucose = results['glucose']['median']
    insulin_bolus = results['insulin_bolus']['realizations'][0]
    i = results['insulin_basal']['realizations'][0]
    m = results['cho']['realizations'][0]
    time = np.arange(datetime.utcfromtimestamp(np.array(data.t)[0].astype(datetime)/1000000000),
                     datetime.utcfromtimestamp(np.array(data.t)[-1].astype(datetime)/1000000000)+timedelta(minutes=5),
                     timedelta(minutes=1)).astype(datetime)

    # Return the results
    return glucose, i, insulin_bolus, m, time



def standard_bolus_calculator(glucose, meal_announcement, meal_type, hypotreatments, bolus, basal, time,
                                      time_index, dss):

    """
    Implements the default bolus calculator formula: B = CHO/CR + (GT-GC)/CF - IOB

    Parameters
    ----------
    glucose: np.ndarray
        An array vector as long the simulation length containing all the simulated glucose concentrations (mg/dl)
        up to time_index. The values after time_index should be ignored.
    meal_announcement: np.ndarray
        An array vector as long the simulation length containing all the meal announcements (g) up to time_index.
        The values after time_index should be ignored.
    meal_type: np.ndarray
        An array of strings as long the simulation length containing the type of each meal.
        If scenario is `single-meal`, labels can be:
            - `M`: main meal
            - `O`: other meal
        If scenario is `multi-meal`, labels can be:
            - `B`: breakfast
            - `L`: lunch
            - `D`: dinner
            - `S`: snack
            - `H`: hypotreatment
        The values after time_index should be ignored.
    hypotreatments: np.ndarray
        An array vector as long the simulation length containing all the hypotreatment intakes (g/min) up to time_index.
        If the scenario is single meal, hypotreatments will contain only the hypotreatments generated by this function
        during the simulation. If the scenario is multi-meal, hypotreatments will ALSO contain the hypotreatments already
        present in the given data that labeled as such. The values after time_index should be ignored.
    bolus: np.ndarray
        An array vector as long the simulation length containing all the insulin boluses (U/min) up to time_index.
        The values after time_index should be ignored.
    basal: np.ndarray
        An array vector as long the simulation length containing all the insulin basal (U/min) up to time_index.
        The values after time_index should be ignored.
    time: np.ndarray
        An array vector as long the simulation length containing the time corresponding to the current step (hours) up to time_index.
        The values after time_index should be ignored.
    time_index: int
        The index corresponding to the previous simulation step of the replay simulation.
    dss: DSS
        An object that represents the hyperparameters of the integrated decision support system.

    Returns
    -------
    b: float
        The bolus insulin rate to administer at time[time_index+1].
    dss: DSS
        An object that represents the hyperparameters of the integrated decision support system.
        dss is also an output since it contains bolus_calculator_handler_params that beside being a
        dict that contains the parameters to pass to  this function, it also serves as memory area.
        It is possible to store values inside it and the standard_bolus_calculator_handler function will be able
        to access to them in the next call of the function.

    Raises
    ------
    None

    See Also
    --------
    None

    Examples
    --------
    None
    """

    b = 0

    # If a meal is announced...
    if meal_announcement[time_index] > 0:

        # compute iob
        ts = 5

        k1 = 0.0173
        k2 = 0.0116
        k3 = 6.73

        iob_6h_curve = np.zeros(shape=(360,))

        for t in range(0, 360):
            iob_6h_curve[t] = 1 - 0.75 * ((- k3 / (k2 * (k1 - k2)) * (np.exp(-k2 * t / 0.75) - 1) + k3 / (
                        k1 * (k1 - k2)) * (np.exp(-k1 * t / 0.75) - 1)) / (2.4947e4))
        iob_6h_curve = iob_6h_curve[ts::ts]

        iob = np.convolve(bolus, iob_6h_curve)
        iob = iob[bolus.shape[0] - 1]

        # ...give a bolus
        GT = 120
        CR = 100
        CF = 200
        b = np.max([0, meal_announcement[time_index] / CR + (glucose[time_index] - GT) / CF - iob])

    return b, dss